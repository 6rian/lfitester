const LFI_TOKEN = `[LFI]`;

function makeErrorResponse(hasError, message) {
  if (hasError) {
    return { hasError, message };
  }
  return { hasError };
}

class LFIExploit {
  constructor() {
    this.url = '';
    this.path = '';
  }

  init(params) {
    return this.validate(params);
  }

  validate(params) {
    const required = ['url', 'path'];
    let errors = [];

    // Check all required params present and have values
    required.forEach((key) => {
      if (!params.hasOwnProperty(key) || params[key] == '') {
        errors.push(`Required parameter missing or empty: ${key}`);
      }
    });

    // Check URL contains the LFI token
    if (!params.url.includes(LFI_TOKEN)) {
      errors.push(`Missing LFI token in URL`);
    }

    if (errors.length) {
      return {
        hasError: true,
        details: errors
      };
    }

    this.url = params.url;
    this.path = params.path;

    return {
      hasError: false
    };
  }

  resolveUrl() {
    return this.url.replace(LFI_TOKEN, this.path);
  }

  async run() {
    return {
      hasError: false
    };
  }
}

module.exports = LFIExploit;
