const LFI_TOKEN = `[LFI]`;

function makeErrorResponse(hasError, message) {
  if (hasError) {
    return { hasError, message };
  }
  return { hasError };
}

module.exports = {
  params: undefined,

  init: (params) => {
    const required = ['url', 'path'];
    const allowed = ['url', 'path'];
    let errors = [];

    // Check for invalid keys
    Object.keys(params).forEach((k) => {
      if (!allowed.includes(k)) {
        errors.push(`Invalid parameter: ${k}`);
        return;
      }
    });

    // Check all required params present and have values
    required.forEach((k) => {
      if (!params.hasOwnProperty(k)) {
        errors.push(`Missing required parameter: ${k}`);
        return;
      }
      if (params[k] == '') {
        errors.push(`Empty value for required parameter: ${k}`);
        return;
      }
    });

    // Check URL contains the LFI token
    if (!params.url.includes(LFI_TOKEN)) {
      errors.push(`Missing LFI token in URL`);
    }

    if (errors.length) {
      return {
        hasError: true,
        details: errors
      };
    }

    this.params = params;
    return {
      hasError: false
    };
  },

  run: async () => {
    return {
      hasError: false
    };
  }
};
